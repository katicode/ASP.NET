@model Vidly.ViewModels.CustomerFormViewModel


<!--at model Vidly.Models.Customer
    Tuodaan Customer luokka, vaihdetty kun tehty uusi ViewModel -->

@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>

<!-- BeginForm on kuin <form> aloitustagi
    mutta jos käytetään alussa using niin sitten saadaan mukaan lopputägi
    "Create" = target action, submit button vie osoitteeseen Customers/Create
    -->
@using (Html.BeginForm("Save", "Customers"))
{
    <!--ValidationSummary tekee kaikki validation messaget yhteen paikkaan (jos false)
        jos true niin individual property errors will be excluded from validationsummary -->
    @Html.ValidationSummary(true, "Please fix the following erros.")

    <div class="form-group">
        <!--Label tekee perustekstin ja sisältönä "Name" Customer luokasta
            LabelFor on label tietylle ja label on pelkkä teksti -->
        @Html.LabelFor(m => m.Customer.Name)
        <!--TextBox luo tekstilaatikon ja kun sisältö haetaan Customer luokan attribuutista Name
            niin tulee automaattisesti kyseiselle muuttujalle määritellyt arvot esim. 255 merkkiä pitkä
            Form control on tyyliluokka bootstrapista -->
        @Html.TextBoxFor(m => m.Customer.Name, new { @class = "form-control" })
        <!-- Validation message -->
        @Html.ValidationMessageFor(m => m.Customer.Name)
    </div>

    <div class="form-group">
        @Html.Label("Membership Type")
        <!--DropDownList attribuutit:
        1. list of items
        2. name of the property in membership type class which holds item
        3. property joka holds text to item
        "Select membershiptype" -> luo rivin listan ylimmäksi -->
        @Html.DropDownListFor(m => m.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.MembershipTypeId)
    </div>

    <div class="form-group">
        @Html.Label("Date of Birth")
        @Html.TextBoxFor(m => m.Customer.Birthdate, "{0:d/M/yyyy }", new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Customer.Birthdate)
    </div>

    <div class="form-group">
        @Html.Label("Subscribed to Newsletter?")
        @Html.CheckBoxFor(m => m.Customer.IsSubscribedToNewsletter, new { @class = "checkbox" })
    </div>

    //hidden kenttä, lähtee eteenpäin mutta ei näy käyttäjälle
    @Html.HiddenFor(m => m.Customer.Id)

    // metodi tekee tokenin, joka on kuin salainen koodi ja asettaa sen as a hidden field in this form and also has a cookie in a users computer
    // kun käyttäjä painaa submit-nappulaa niin verrataan tokenia ja käyttäjälle tallennettua cookieta. jos ovat sama niin ok. jos eri niin kyseessä on hyökkäys muualta.
    // tämä hidden field tulee näkyviin ainoastaan kun asiakas vierailee customerformilla eli ei jos sinne mennään suoralla osoitteella. 
    // vaikka hyökkääjä saisi tietoonsa cookien niin silti hän ei saa käsiinsä hidden fieldiä eli sitä AntiForgeryTokenin tekemää.
    @Html.AntiForgeryToken()

    <button type="submit" class="btn btn-primary">Save</button>
}

<!--enable = aktivoi, client side errors
    eli lomake ei lähde Save-Actionille jos siinä on virheitä 
    --
    Huom. Razor View Engine tarkistaa data annotations ja lisää ne html-koodin sekaan
    Alla oleva jqueryvalidation toimii, koska se osaa etsiä html-koodista validaatiot
    -->
@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
